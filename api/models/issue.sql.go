// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: issue.sql

package models

import (
	"context"
	"database/sql"
)

const getIssueByID = `-- name: GetIssueByID :one
SELECT issues.id FROM "issues" WHERE issues.id = $1
`

func (q *Queries) GetIssueByID(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, getIssueByID, id)
	err := row.Scan(&id)
	return id, err
}

const getIssueCountByFilters = `-- name: GetIssueCountByFilters :one
SELECT
    COUNT(DISTINCT i.id) AS issue_count
FROM
    public.repositories r
JOIN
    public.repository_collaborators rc ON r.id = rc.repo_id
JOIN
    public.organization_collaborators oc ON rc.organization_collaborator_id = oc.id
JOIN
    public.organizations org ON oc.organization_id = org.id
LEFT JOIN
    public.issues i ON rc.id = i.repository_collaborators_id
LEFT JOIN
    public.pull_requests pr ON rc.id = pr.repository_collaborators_id
LEFT JOIN
    public.assignees a ON (i.id = a.issue_id OR pr.id = a.pr_id)
LEFT JOIN
    public.collaborators coll ON a.collaborator_id = coll.id
WHERE
    (
        (pr.github_updated_at BETWEEN $1 AND $2) OR
        (i.github_updated_at BETWEEN $1 AND $2)
    )
    AND a.collaborator_id = ANY(string_to_array($3, ','))
    AND org.id = ANY(string_to_array($4, ','))
    AND r.id = ANY(string_to_array($5, ','))
`

type GetIssueCountByFiltersParams struct {
	GithubUpdatedAt   sql.NullTime `json:"github_updated_at"`
	GithubUpdatedAt_2 sql.NullTime `json:"github_updated_at_2"`
	StringToArray     string       `json:"string_to_array"`
	StringToArray_2   string       `json:"string_to_array_2"`
	StringToArray_3   string       `json:"string_to_array_3"`
}

func (q *Queries) GetIssueCountByFilters(ctx context.Context, arg GetIssueCountByFiltersParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getIssueCountByFilters,
		arg.GithubUpdatedAt,
		arg.GithubUpdatedAt_2,
		arg.StringToArray,
		arg.StringToArray_2,
		arg.StringToArray_3,
	)
	var issue_count int64
	err := row.Scan(&issue_count)
	return issue_count, err
}

const insertIssue = `-- name: InsertIssue :one
INSERT INTO
    "issues" (
        "id",
        "title",
        "status",
        "url",
        "number",
        "author_id",
        "repository_collaborators_id",
        "github_closed_at",
        "github_created_at",
        "github_updated_at"
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING issues.id
`

type InsertIssueParams struct {
	ID                        string         `json:"id"`
	Title                     string         `json:"title"`
	Status                    string         `json:"status"`
	Url                       sql.NullString `json:"url"`
	Number                    sql.NullInt32  `json:"number"`
	AuthorID                  string         `json:"author_id"`
	RepositoryCollaboratorsID string         `json:"repository_collaborators_id"`
	GithubClosedAt            sql.NullTime   `json:"github_closed_at"`
	GithubCreatedAt           sql.NullTime   `json:"github_created_at"`
	GithubUpdatedAt           sql.NullTime   `json:"github_updated_at"`
}

func (q *Queries) InsertIssue(ctx context.Context, arg InsertIssueParams) (string, error) {
	row := q.db.QueryRowContext(ctx, insertIssue,
		arg.ID,
		arg.Title,
		arg.Status,
		arg.Url,
		arg.Number,
		arg.AuthorID,
		arg.RepositoryCollaboratorsID,
		arg.GithubClosedAt,
		arg.GithubCreatedAt,
		arg.GithubUpdatedAt,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}
