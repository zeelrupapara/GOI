// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: repo_member.sql

package models

import (
	"context"
)

const getRepoMemberByOrgRepoID = `-- name: GetRepoMemberByOrgRepoID :one
SELECT
    repository_collaborators.id
FROM
    "repository_collaborators"
WHERE
    repository_collaborators.repo_id = $1
    AND repository_collaborators.organization_collaborator_id = $2
`

type GetRepoMemberByOrgRepoIDParams struct {
	RepoID                     string `json:"repo_id"`
	OrganizationCollaboratorID string `json:"organization_collaborator_id"`
}

func (q *Queries) GetRepoMemberByOrgRepoID(ctx context.Context, arg GetRepoMemberByOrgRepoIDParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getRepoMemberByOrgRepoID, arg.RepoID, arg.OrganizationCollaboratorID)
	var id string
	err := row.Scan(&id)
	return id, err
}

const insertOrgRepoMember = `-- name: InsertOrgRepoMember :one
INSERT INTO
    "repository_collaborators" (
        "id",
        "repo_id",
        "organization_collaborator_id"
    )
VALUES ($1, $2, $3) RETURNING repository_collaborators.id
`

type InsertOrgRepoMemberParams struct {
	ID                         string `json:"id"`
	RepoID                     string `json:"repo_id"`
	OrganizationCollaboratorID string `json:"organization_collaborator_id"`
}

func (q *Queries) InsertOrgRepoMember(ctx context.Context, arg InsertOrgRepoMemberParams) (string, error) {
	row := q.db.QueryRowContext(ctx, insertOrgRepoMember, arg.ID, arg.RepoID, arg.OrganizationCollaboratorID)
	var id string
	err := row.Scan(&id)
	return id, err
}
