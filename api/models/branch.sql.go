// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: branch.sql

package models

import (
	"context"
)

const getBranchByID = `-- name: GetBranchByID :one
SELECT branches.id
FROM "branches"
WHERE
    branches.repository_id = $1
    AND branches.name = $2
`

type GetBranchByIDParams struct {
	RepositoryID string `json:"repository_id"`
	Name         string `json:"name"`
}

func (q *Queries) GetBranchByID(ctx context.Context, arg GetBranchByIDParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getBranchByID, arg.RepositoryID, arg.Name)
	var id string
	err := row.Scan(&id)
	return id, err
}

const insertBranch = `-- name: InsertBranch :one
INSERT INTO
    "branches" (
        "id",
        "name",
        "is_default",
        "repository_id"
    )
VALUES ($1, $2, $3, $4) RETURNING branches.id
`

type InsertBranchParams struct {
	ID           string `json:"id"`
	Name         string `json:"name"`
	IsDefault    bool   `json:"is_default"`
	RepositoryID string `json:"repository_id"`
}

func (q *Queries) InsertBranch(ctx context.Context, arg InsertBranchParams) (string, error) {
	row := q.db.QueryRowContext(ctx, insertBranch,
		arg.ID,
		arg.Name,
		arg.IsDefault,
		arg.RepositoryID,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}
