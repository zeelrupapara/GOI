// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: organization.sql

package models

import (
	"context"
	"database/sql"
)

const getOrganizationByLogin = `-- name: GetOrganizationByLogin :one
SELECT organizations.id
FROM "organizations"
WHERE login = $1
`

func (q *Queries) GetOrganizationByLogin(ctx context.Context, login string) (string, error) {
	row := q.db.QueryRowContext(ctx, getOrganizationByLogin, login)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getOrganizations = `-- name: GetOrganizations :many
SELECT id, login, name, email, location, description, url, avatar_url, website_url, github_updated_at, github_created_at, created_at, updated_at, deleted_at
FROM "organizations"
ORDER BY organizations.login
`

func (q *Queries) GetOrganizations(ctx context.Context) ([]Organization, error) {
	rows, err := q.db.QueryContext(ctx, getOrganizations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.Login,
			&i.Name,
			&i.Email,
			&i.Location,
			&i.Description,
			&i.Url,
			&i.AvatarUrl,
			&i.WebsiteUrl,
			&i.GithubUpdatedAt,
			&i.GithubCreatedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertOrganization = `-- name: InsertOrganization :one
INSERT INTO "organizations" (
        "id",
        "login",
        "name",
        "email",
        "location",
        "description",
        "url",
        "avatar_url",
        "website_url",
        "github_created_at",
        "github_updated_at"
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING organizations.id
`

type InsertOrganizationParams struct {
	ID              string         `json:"id"`
	Login           string         `json:"login"`
	Name            sql.NullString `json:"name"`
	Email           sql.NullString `json:"email"`
	Location        sql.NullString `json:"location"`
	Description     sql.NullString `json:"description"`
	Url             sql.NullString `json:"url"`
	AvatarUrl       sql.NullString `json:"avatar_url"`
	WebsiteUrl      sql.NullString `json:"website_url"`
	GithubCreatedAt sql.NullTime   `json:"github_created_at"`
	GithubUpdatedAt sql.NullTime   `json:"github_updated_at"`
}

func (q *Queries) InsertOrganization(ctx context.Context, arg InsertOrganizationParams) (string, error) {
	row := q.db.QueryRowContext(ctx, insertOrganization,
		arg.ID,
		arg.Login,
		arg.Name,
		arg.Email,
		arg.Location,
		arg.Description,
		arg.Url,
		arg.AvatarUrl,
		arg.WebsiteUrl,
		arg.GithubCreatedAt,
		arg.GithubUpdatedAt,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}
