// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: organization.sql

package models

import (
	"context"
	"database/sql"
)

const getOrganizationByFilter = `-- name: GetOrganizationByFilter :one
SELECT
    COUNT(DISTINCT org.id) AS organization_count
FROM
    public.repositories r
JOIN
    public.repository_collaborators rc ON r.id = rc.repo_id
JOIN
    public.organization_collaborators oc ON rc.organization_collaborator_id = oc.id
JOIN
    public.organizations org ON oc.organization_id = org.id
LEFT JOIN
    public.issues i ON rc.id = i.repository_collaborators_id
LEFT JOIN
    public.pull_requests pr ON rc.id = pr.repository_collaborators_id
LEFT JOIN
    public.assignees a ON (i.id = a.issue_id OR pr.id = a.pr_id)
LEFT JOIN
    public.collaborators coll ON a.collaborator_id = coll.id
WHERE
    (
        (pr.github_updated_at BETWEEN $1 AND $2) OR
        (i.github_updated_at BETWEEN $1 AND $2)
    )
    AND coll.id = ANY(string_to_array($3, ','))
    AND org.id = ANY(string_to_array($4, ','))
    AND r.id = ANY(string_to_array($5, ','))
`

type GetOrganizationByFilterParams struct {
	GithubUpdatedAt   sql.NullTime `json:"github_updated_at"`
	GithubUpdatedAt_2 sql.NullTime `json:"github_updated_at_2"`
	StringToArray     string       `json:"string_to_array"`
	StringToArray_2   string       `json:"string_to_array_2"`
	StringToArray_3   string       `json:"string_to_array_3"`
}

func (q *Queries) GetOrganizationByFilter(ctx context.Context, arg GetOrganizationByFilterParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getOrganizationByFilter,
		arg.GithubUpdatedAt,
		arg.GithubUpdatedAt_2,
		arg.StringToArray,
		arg.StringToArray_2,
		arg.StringToArray_3,
	)
	var organization_count int64
	err := row.Scan(&organization_count)
	return organization_count, err
}

const getOrganizationByLogin = `-- name: GetOrganizationByLogin :one
SELECT organizations.id
FROM "organizations"
WHERE login = $1
`

func (q *Queries) GetOrganizationByLogin(ctx context.Context, login string) (string, error) {
	row := q.db.QueryRowContext(ctx, getOrganizationByLogin, login)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getOrganizationContributionsByFilters = `-- name: GetOrganizationContributionsByFilters :many
SELECT DISTINCT
    org.login AS organization_name,
    COUNT(DISTINCT pr.id) AS total_prs,
    COUNT(DISTINCT i.id) AS total_issues
FROM
    public.repositories r
JOIN
    public.repository_collaborators rc ON r.id = rc.repo_id
JOIN
    public.organization_collaborators oc ON rc.organization_collaborator_id = oc.id
JOIN
    public.organizations org ON oc.organization_id = org.id
LEFT JOIN
    public.issues i ON rc.id = i.repository_collaborators_id
LEFT JOIN
    public.pull_requests pr ON rc.id = pr.repository_collaborators_id
LEFT JOIN
    public.assignees a ON (i.id = a.issue_id OR pr.id = a.pr_id)
LEFT JOIN
    public.collaborators coll ON a.collaborator_id = coll.id
WHERE
    (
        (pr.github_updated_at BETWEEN $1 AND $2) OR
        (i.github_updated_at BETWEEN $1 AND $2)
    )
    AND coll.id = ANY(string_to_array($3, ','))
    AND org.id = ANY(string_to_array($4, ','))
    AND r.id = ANY(string_to_array($5, ','))
GROUP BY org.login
`

type GetOrganizationContributionsByFiltersParams struct {
	GithubUpdatedAt   sql.NullTime `json:"github_updated_at"`
	GithubUpdatedAt_2 sql.NullTime `json:"github_updated_at_2"`
	StringToArray     string       `json:"string_to_array"`
	StringToArray_2   string       `json:"string_to_array_2"`
	StringToArray_3   string       `json:"string_to_array_3"`
}

type GetOrganizationContributionsByFiltersRow struct {
	OrganizationName string `json:"organization_name"`
	TotalPrs         int64  `json:"total_prs"`
	TotalIssues      int64  `json:"total_issues"`
}

func (q *Queries) GetOrganizationContributionsByFilters(ctx context.Context, arg GetOrganizationContributionsByFiltersParams) ([]GetOrganizationContributionsByFiltersRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrganizationContributionsByFilters,
		arg.GithubUpdatedAt,
		arg.GithubUpdatedAt_2,
		arg.StringToArray,
		arg.StringToArray_2,
		arg.StringToArray_3,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrganizationContributionsByFiltersRow
	for rows.Next() {
		var i GetOrganizationContributionsByFiltersRow
		if err := rows.Scan(&i.OrganizationName, &i.TotalPrs, &i.TotalIssues); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrganizationIDs = `-- name: GetOrganizationIDs :many
SELECT DISTINCT
    organizations.id
FROM
    "organizations"
`

func (q *Queries) GetOrganizationIDs(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getOrganizationIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrganizations = `-- name: GetOrganizations :many
SELECT id, login, name, email, location, description, url, avatar_url, website_url, github_updated_at, github_created_at, created_at, updated_at, deleted_at
FROM "organizations"
ORDER BY organizations.login
`

func (q *Queries) GetOrganizations(ctx context.Context) ([]Organization, error) {
	rows, err := q.db.QueryContext(ctx, getOrganizations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.Login,
			&i.Name,
			&i.Email,
			&i.Location,
			&i.Description,
			&i.Url,
			&i.AvatarUrl,
			&i.WebsiteUrl,
			&i.GithubUpdatedAt,
			&i.GithubCreatedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertOrganization = `-- name: InsertOrganization :one
INSERT INTO "organizations" (
        "id",
        "login",
        "name",
        "email",
        "location",
        "description",
        "url",
        "avatar_url",
        "website_url",
        "github_created_at",
        "github_updated_at"
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING organizations.id
`

type InsertOrganizationParams struct {
	ID              string         `json:"id"`
	Login           string         `json:"login"`
	Name            sql.NullString `json:"name"`
	Email           sql.NullString `json:"email"`
	Location        sql.NullString `json:"location"`
	Description     sql.NullString `json:"description"`
	Url             sql.NullString `json:"url"`
	AvatarUrl       sql.NullString `json:"avatar_url"`
	WebsiteUrl      sql.NullString `json:"website_url"`
	GithubCreatedAt sql.NullTime   `json:"github_created_at"`
	GithubUpdatedAt sql.NullTime   `json:"github_updated_at"`
}

func (q *Queries) InsertOrganization(ctx context.Context, arg InsertOrganizationParams) (string, error) {
	row := q.db.QueryRowContext(ctx, insertOrganization,
		arg.ID,
		arg.Login,
		arg.Name,
		arg.Email,
		arg.Location,
		arg.Description,
		arg.Url,
		arg.AvatarUrl,
		arg.WebsiteUrl,
		arg.GithubCreatedAt,
		arg.GithubUpdatedAt,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}
