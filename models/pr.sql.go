// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: pr.sql

package models

import (
	"context"
	"database/sql"
)

const getPRByID = `-- name: GetPRByID :one
SELECT pull_requests.id
FROM "pull_requests"
WHERE pull_requests.id = $1
`

func (q *Queries) GetPRByID(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, getPRByID, id)
	err := row.Scan(&id)
	return id, err
}

const insertPR = `-- name: InsertPR :one
INSERT INTO
    "pull_requests" (
        "id",
        "title",
        "status",
        "url",
        "number",
        "is_draft",
        "branch",
        "author_id",
        "repository_id",
        "github_closed_at",
        "github_merged_at",
        "github_created_at",
        "github_updated_at"
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13
    ) RETURNING pull_requests.id
`

type InsertPRParams struct {
	ID              string         `json:"id"`
	Title           sql.NullString `json:"title"`
	Status          sql.NullString `json:"status"`
	Url             sql.NullString `json:"url"`
	Number          sql.NullInt32  `json:"number"`
	IsDraft         sql.NullBool   `json:"is_draft"`
	Branch          sql.NullString `json:"branch"`
	AuthorID        string         `json:"author_id"`
	RepositoryID    string         `json:"repository_id"`
	GithubClosedAt  sql.NullTime   `json:"github_closed_at"`
	GithubMergedAt  sql.NullTime   `json:"github_merged_at"`
	GithubCreatedAt sql.NullTime   `json:"github_created_at"`
	GithubUpdatedAt sql.NullTime   `json:"github_updated_at"`
}

func (q *Queries) InsertPR(ctx context.Context, arg InsertPRParams) (string, error) {
	row := q.db.QueryRowContext(ctx, insertPR,
		arg.ID,
		arg.Title,
		arg.Status,
		arg.Url,
		arg.Number,
		arg.IsDraft,
		arg.Branch,
		arg.AuthorID,
		arg.RepositoryID,
		arg.GithubClosedAt,
		arg.GithubMergedAt,
		arg.GithubCreatedAt,
		arg.GithubUpdatedAt,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}
