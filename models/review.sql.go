// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: review.sql

package models

import (
	"context"
	"database/sql"
)

const getReviewByID = `-- name: GetReviewByID :one
SELECT reviews.id FROM "reviews" WHERE reviews.id = $1
`

func (q *Queries) GetReviewByID(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, getReviewByID, id)
	err := row.Scan(&id)
	return id, err
}

const insertReview = `-- name: InsertReview :one
INSERT INTO
    "reviews" (
        "id",
        "reviewer_id",
        "pr_id",
        "status",
        "github_created_at",
        "github_updated_at",
        "github_submitted_at"
    )
VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING reviews.id
`

type InsertReviewParams struct {
	ID                string       `json:"id"`
	ReviewerID        string       `json:"reviewer_id"`
	PrID              string       `json:"pr_id"`
	Status            string       `json:"status"`
	GithubCreatedAt   sql.NullTime `json:"github_created_at"`
	GithubUpdatedAt   sql.NullTime `json:"github_updated_at"`
	GithubSubmittedAt sql.NullTime `json:"github_submitted_at"`
}

func (q *Queries) InsertReview(ctx context.Context, arg InsertReviewParams) (string, error) {
	row := q.db.QueryRowContext(ctx, insertReview,
		arg.ID,
		arg.ReviewerID,
		arg.PrID,
		arg.Status,
		arg.GithubCreatedAt,
		arg.GithubUpdatedAt,
		arg.GithubSubmittedAt,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}
