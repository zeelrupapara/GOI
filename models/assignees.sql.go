// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: assignees.sql

package models

import (
	"context"
)

const getAssignedLabal = `-- name: GetAssignedLabal :one
SELECT assigned_labals.id
FROM "assigned_labals"
WHERE assigned_labals.labal_id = $1 AND assigned_labals.activity_id = $2
`

type GetAssignedLabalParams struct {
	LabalID    string `json:"labal_id"`
	ActivityID string `json:"activity_id"`
}

func (q *Queries) GetAssignedLabal(ctx context.Context, arg GetAssignedLabalParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getAssignedLabal, arg.LabalID, arg.ActivityID)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getAssigneeByID = `-- name: GetAssigneeByID :one
SELECT assignees.id FROM "assignees" WHERE assignees.collaborator_id = $1 AND assignees.activity_id = $2
`

type GetAssigneeByIDParams struct {
	CollaboratorID string `json:"collaborator_id"`
	ActivityID     string `json:"activity_id"`
}

func (q *Queries) GetAssigneeByID(ctx context.Context, arg GetAssigneeByIDParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getAssigneeByID, arg.CollaboratorID, arg.ActivityID)
	var id string
	err := row.Scan(&id)
	return id, err
}

const insertAssignedLabal = `-- name: InsertAssignedLabal :one
INSERT INTO
    "assigned_labals" (
        "id",
        "labal_id",
        "activity_id",
        "activity_type"
    )
VALUES ($1, $2, $3, $4) RETURNING assigned_labals.id
`

type InsertAssignedLabalParams struct {
	ID           string `json:"id"`
	LabalID      string `json:"labal_id"`
	ActivityID   string `json:"activity_id"`
	ActivityType string `json:"activity_type"`
}

func (q *Queries) InsertAssignedLabal(ctx context.Context, arg InsertAssignedLabalParams) (string, error) {
	row := q.db.QueryRowContext(ctx, insertAssignedLabal,
		arg.ID,
		arg.LabalID,
		arg.ActivityID,
		arg.ActivityType,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const insertAssignee = `-- name: InsertAssignee :one
INSERT INTO
    "assignees" (
        "id",
        "collaborator_id",
        "activity_id",
        "activity_type"
    )
VALUES ($1, $2, $3, $4) RETURNING assignees.id
`

type InsertAssigneeParams struct {
	ID             string `json:"id"`
	CollaboratorID string `json:"collaborator_id"`
	ActivityID     string `json:"activity_id"`
	ActivityType   string `json:"activity_type"`
}

func (q *Queries) InsertAssignee(ctx context.Context, arg InsertAssigneeParams) (string, error) {
	row := q.db.QueryRowContext(ctx, insertAssignee,
		arg.ID,
		arg.CollaboratorID,
		arg.ActivityID,
		arg.ActivityType,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}
