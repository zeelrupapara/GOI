// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: org_collaborator.sql

package models

import (
	"context"
)

const getOrgMemberByID = `-- name: GetOrgMemberByID :one
SELECT organization_collaborators.id
FROM "organization_collaborators"
WHERE organization_id = $1
    AND collaborator_id = $2
`

type GetOrgMemberByIDParams struct {
	OrganizationID string `json:"organization_id"`
	CollaboratorID string `json:"collaborator_id"`
}

func (q *Queries) GetOrgMemberByID(ctx context.Context, arg GetOrgMemberByIDParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getOrgMemberByID, arg.OrganizationID, arg.CollaboratorID)
	var id string
	err := row.Scan(&id)
	return id, err
}

const insertOrgMember = `-- name: InsertOrgMember :one
INSERT INTO "organization_collaborators" (
        "id",
        "organization_id",
        "collaborator_id"
    )
VALUES ($1, $2, $3)
RETURNING organization_collaborators.id
`

type InsertOrgMemberParams struct {
	ID             string `json:"id"`
	OrganizationID string `json:"organization_id"`
	CollaboratorID string `json:"collaborator_id"`
}

func (q *Queries) InsertOrgMember(ctx context.Context, arg InsertOrgMemberParams) (string, error) {
	row := q.db.QueryRowContext(ctx, insertOrgMember, arg.ID, arg.OrganizationID, arg.CollaboratorID)
	var id string
	err := row.Scan(&id)
	return id, err
}
