// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: repo.sql

package models

import (
	"context"
	"database/sql"
)

const getRepoByID = `-- name: GetRepoByID :one
SELECT repositories.id
FROM "repositories"
WHERE repositories.id = $1
`

func (q *Queries) GetRepoByID(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, getRepoByID, id)
	err := row.Scan(&id)
	return id, err
}

const insertRepo = `-- name: InsertRepo :one
INSERT INTO "repositories" (
        "id",
        "name",
        "is_private",
        "default_branch",
        "url",
        "homepage_url",
        "open_issues",
        "closed_issues",
        "open_prs",
        "closed_prs",
        "merged_prs",
        "github_created_at",
        "github_updated_at"
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13
    )
RETURNING repositories.id
`

type InsertRepoParams struct {
	ID              string         `json:"id"`
	Name            sql.NullString `json:"name"`
	IsPrivate       sql.NullBool   `json:"is_private"`
	DefaultBranch   sql.NullString `json:"default_branch"`
	Url             sql.NullString `json:"url"`
	HomepageUrl     sql.NullString `json:"homepage_url"`
	OpenIssues      sql.NullInt32  `json:"open_issues"`
	ClosedIssues    sql.NullInt32  `json:"closed_issues"`
	OpenPrs         sql.NullInt32  `json:"open_prs"`
	ClosedPrs       sql.NullInt32  `json:"closed_prs"`
	MergedPrs       sql.NullInt32  `json:"merged_prs"`
	GithubCreatedAt sql.NullTime   `json:"github_created_at"`
	GithubUpdatedAt sql.NullTime   `json:"github_updated_at"`
}

func (q *Queries) InsertRepo(ctx context.Context, arg InsertRepoParams) (string, error) {
	row := q.db.QueryRowContext(ctx, insertRepo,
		arg.ID,
		arg.Name,
		arg.IsPrivate,
		arg.DefaultBranch,
		arg.Url,
		arg.HomepageUrl,
		arg.OpenIssues,
		arg.ClosedIssues,
		arg.OpenPrs,
		arg.ClosedPrs,
		arg.MergedPrs,
		arg.GithubCreatedAt,
		arg.GithubUpdatedAt,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}
