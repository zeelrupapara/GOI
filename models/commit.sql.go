// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: commit.sql

package models

import (
	"context"
	"database/sql"
)

const getCommitByID = `-- name: GetCommitByID :one
SELECT commits.id FROM "commits" WHERE commits.id = $1
`

func (q *Queries) GetCommitByID(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, getCommitByID, id)
	err := row.Scan(&id)
	return id, err
}

const insertCommit = `-- name: InsertCommit :one
INSERT INTO
    "commits" (
        "id",
        "message",
        "branch_id",
        "author_id",
        "pr_id",
        "url",
        "commit_url",
        "github_committed_time"
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING commits.id
`

type InsertCommitParams struct {
	ID                  string         `json:"id"`
	Message             sql.NullString `json:"message"`
	BranchID            string         `json:"branch_id"`
	AuthorID            string         `json:"author_id"`
	PrID                sql.NullString `json:"pr_id"`
	Url                 sql.NullString `json:"url"`
	CommitUrl           sql.NullString `json:"commit_url"`
	GithubCommittedTime sql.NullTime   `json:"github_committed_time"`
}

func (q *Queries) InsertCommit(ctx context.Context, arg InsertCommitParams) (string, error) {
	row := q.db.QueryRowContext(ctx, insertCommit,
		arg.ID,
		arg.Message,
		arg.BranchID,
		arg.AuthorID,
		arg.PrID,
		arg.Url,
		arg.CommitUrl,
		arg.GithubCommittedTime,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}
