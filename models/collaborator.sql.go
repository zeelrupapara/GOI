// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: collaborator.sql

package models

import (
	"context"
	"database/sql"
)

const getMemberByLogin = `-- name: GetMemberByLogin :one
SELECT collaborators.id
FROM "collaborators"
WHERE login = $1
`

func (q *Queries) GetMemberByLogin(ctx context.Context, login string) (string, error) {
	row := q.db.QueryRowContext(ctx, getMemberByLogin, login)
	var id string
	err := row.Scan(&id)
	return id, err
}

const insertMember = `-- name: InsertMember :one
INSERT INTO "collaborators" (
        "id",
        "login",
        "name",
        "email",
        "url",
        "avatar_url",
        "website_url",
        "github_created_at",
        "github_updated_at"
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING collaborators.id
`

type InsertMemberParams struct {
	ID              string         `json:"id"`
	Login           string         `json:"login"`
	Name            sql.NullString `json:"name"`
	Email           sql.NullString `json:"email"`
	Url             sql.NullString `json:"url"`
	AvatarUrl       sql.NullString `json:"avatar_url"`
	WebsiteUrl      sql.NullString `json:"website_url"`
	GithubCreatedAt sql.NullTime   `json:"github_created_at"`
	GithubUpdatedAt sql.NullTime   `json:"github_updated_at"`
}

func (q *Queries) InsertMember(ctx context.Context, arg InsertMemberParams) (string, error) {
	row := q.db.QueryRowContext(ctx, insertMember,
		arg.ID,
		arg.Login,
		arg.Name,
		arg.Email,
		arg.Url,
		arg.AvatarUrl,
		arg.WebsiteUrl,
		arg.GithubCreatedAt,
		arg.GithubUpdatedAt,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}
