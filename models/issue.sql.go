// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: issue.sql

package models

import (
	"context"
	"database/sql"
)

const getIssueByID = `-- name: GetIssueByID :one
SELECT issues.id FROM "issues" WHERE issues.id = $1
`

func (q *Queries) GetIssueByID(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, getIssueByID, id)
	err := row.Scan(&id)
	return id, err
}

const insertIssue = `-- name: InsertIssue :one
INSERT INTO
    "issues" (
        "id",
        "title",
        "status",
        "url",
        "number",
        "author_id",
        "repository_id",
        "github_closed_at",
        "github_created_at",
        "github_updated_at"
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING issues.id
`

type InsertIssueParams struct {
	ID              string         `json:"id"`
	Title           string         `json:"title"`
	Status          string         `json:"status"`
	Url             sql.NullString `json:"url"`
	Number          sql.NullInt32  `json:"number"`
	AuthorID        string         `json:"author_id"`
	RepositoryID    string         `json:"repository_id"`
	GithubClosedAt  sql.NullTime   `json:"github_closed_at"`
	GithubCreatedAt sql.NullTime   `json:"github_created_at"`
	GithubUpdatedAt sql.NullTime   `json:"github_updated_at"`
}

func (q *Queries) InsertIssue(ctx context.Context, arg InsertIssueParams) (string, error) {
	row := q.db.QueryRowContext(ctx, insertIssue,
		arg.ID,
		arg.Title,
		arg.Status,
		arg.Url,
		arg.Number,
		arg.AuthorID,
		arg.RepositoryID,
		arg.GithubClosedAt,
		arg.GithubCreatedAt,
		arg.GithubUpdatedAt,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}
